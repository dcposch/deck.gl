"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

exports.default = "#define SHADER_NAME arc-layer-vertex-64-shader\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\n\nattribute vec4 instancePositions;\nattribute vec4 instancePositions64Low;\n\nattribute vec3 instancePickingColors;\n\nuniform float numSegments;\nuniform vec2 viewportSize;\nuniform float strokeWidth;\nuniform float opacity;\nuniform float renderPickingBuffer;\n\nvarying vec4 vColor;\n\nvec2 paraboloid_fp64(vec2 source[2], vec2 target[2], float ratio) {\n\n  vec2 x[2];\n  vec2_mix_fp64(source, target, ratio, x);\n  vec2 center[2];\n  vec2_mix_fp64(source, target, 0.5, center);\n\n  vec2 dSourceCenter = vec2_distance_fp64(source, center);\n  vec2 dXCenter = vec2_distance_fp64(x, center);\n  return mul_fp64(sum_fp64(dSourceCenter, dXCenter), sub_fp64(dSourceCenter, dXCenter));\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * viewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  vec2 offset_screenspace = dir_screenspace * offset_direction * strokeWidth / 2.0;\n  vec2 offset_clipspace = offset_screenspace / viewportSize * 2.0;\n\n  return offset_clipspace;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\nvoid get_pos_fp64(vec2 source[2], vec2 target[2], float segmentRatio, out vec2 position[4]) {\n\n  vec2 vertex_height = paraboloid_fp64(source, target, segmentRatio);\n\n  vec2 position_temp[2];\n\n  vec2_mix_fp64(source, target, segmentRatio, position_temp);\n\n  position[0] = position_temp[0];\n  position[1] = position_temp[1];\n\n  if (vertex_height.x < 0.0 || (vertex_height.x == 0.0 && vertex_height.y <= 0.0)) {\n    vertex_height = vec2(0.0, 0.0);\n  }\n\n  position[2] = sqrt_fp64(vertex_height);\n  position[3] = vec2(1.0, 0.0);\n}\n\nvoid main(void) {\n  vec4 instanceSourcePositions64 = vec4(instancePositions.x,\n    instancePositions64Low.x, instancePositions.y, instancePositions64Low.y);\n  vec4 instanceTargetPositions64 = vec4(instancePositions.z,\n    instancePositions64Low.z, instancePositions.w, instancePositions64Low.w);\n\n  vec2 projected_source_coord[2];\n  vec2 projected_target_coord[2];\n\n  project_position_fp64(instanceSourcePositions64, projected_source_coord);\n  project_position_fp64(instanceTargetPositions64, projected_target_coord);\n\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\n\n  vec2 curr_pos_modelspace[4];\n\n  get_pos_fp64(projected_source_coord, projected_target_coord, segmentRatio,\n    curr_pos_modelspace);\n\n  vec2 next_pos_modelspace[4];\n\n  get_pos_fp64(projected_source_coord, projected_target_coord, nextSegmentRatio,\n    next_pos_modelspace);\n\n  vec4 curr_pos_clipspace = project_to_clipspace_fp64(curr_pos_modelspace);\n  vec4 next_pos_clipspace = project_to_clipspace_fp64(next_pos_modelspace);\n\n  vec2 offset = getExtrusionOffset(next_pos_clipspace.xy - curr_pos_clipspace.xy, positions.y);\n\n  gl_Position = curr_pos_clipspace + vec4(offset, 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio) / 255.;\n\n  vColor = mix(\n    vec4(color.rgb, color.a * opacity),\n    vec4(instancePickingColors / 255., 1.),\n    renderPickingBuffer\n  );\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9hcmMtbGF5ZXIvYXJjLWxheWVyLXZlcnRleC02NC5nbHNsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXJjLWxheWVyLXZlcnRleC02NC5nbHNsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE2IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuZXhwb3J0IGRlZmF1bHQgYFxcXG4jZGVmaW5lIFNIQURFUl9OQU1FIGFyYy1sYXllci12ZXJ0ZXgtNjQtc2hhZGVyXG5cbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9ucztcbmF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlU291cmNlQ29sb3JzO1xuYXR0cmlidXRlIHZlYzQgaW5zdGFuY2VUYXJnZXRDb2xvcnM7XG5cbmF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlUG9zaXRpb25zO1xuYXR0cmlidXRlIHZlYzQgaW5zdGFuY2VQb3NpdGlvbnM2NExvdztcblxuYXR0cmlidXRlIHZlYzMgaW5zdGFuY2VQaWNraW5nQ29sb3JzO1xuXG51bmlmb3JtIGZsb2F0IG51bVNlZ21lbnRzO1xudW5pZm9ybSB2ZWMyIHZpZXdwb3J0U2l6ZTtcbnVuaWZvcm0gZmxvYXQgc3Ryb2tlV2lkdGg7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG51bmlmb3JtIGZsb2F0IHJlbmRlclBpY2tpbmdCdWZmZXI7XG5cbnZhcnlpbmcgdmVjNCB2Q29sb3I7XG5cbnZlYzIgcGFyYWJvbG9pZF9mcDY0KHZlYzIgc291cmNlWzJdLCB2ZWMyIHRhcmdldFsyXSwgZmxvYXQgcmF0aW8pIHtcblxuICB2ZWMyIHhbMl07XG4gIHZlYzJfbWl4X2ZwNjQoc291cmNlLCB0YXJnZXQsIHJhdGlvLCB4KTtcbiAgdmVjMiBjZW50ZXJbMl07XG4gIHZlYzJfbWl4X2ZwNjQoc291cmNlLCB0YXJnZXQsIDAuNSwgY2VudGVyKTtcblxuICB2ZWMyIGRTb3VyY2VDZW50ZXIgPSB2ZWMyX2Rpc3RhbmNlX2ZwNjQoc291cmNlLCBjZW50ZXIpO1xuICB2ZWMyIGRYQ2VudGVyID0gdmVjMl9kaXN0YW5jZV9mcDY0KHgsIGNlbnRlcik7XG4gIHJldHVybiBtdWxfZnA2NChzdW1fZnA2NChkU291cmNlQ2VudGVyLCBkWENlbnRlciksIHN1Yl9mcDY0KGRTb3VyY2VDZW50ZXIsIGRYQ2VudGVyKSk7XG59XG5cbi8vIG9mZnNldCB2ZWN0b3IgYnkgc3Ryb2tlV2lkdGggcGl4ZWxzXG4vLyBvZmZzZXRfZGlyZWN0aW9uIGlzIC0xIChsZWZ0KSBvciAxIChyaWdodClcbnZlYzIgZ2V0RXh0cnVzaW9uT2Zmc2V0KHZlYzIgbGluZV9jbGlwc3BhY2UsIGZsb2F0IG9mZnNldF9kaXJlY3Rpb24pIHtcbiAgLy8gbm9ybWFsaXplZCBkaXJlY3Rpb24gb2YgdGhlIGxpbmVcbiAgdmVjMiBkaXJfc2NyZWVuc3BhY2UgPSBub3JtYWxpemUobGluZV9jbGlwc3BhY2UgKiB2aWV3cG9ydFNpemUpO1xuICAvLyByb3RhdGUgYnkgOTAgZGVncmVlc1xuICBkaXJfc2NyZWVuc3BhY2UgPSB2ZWMyKC1kaXJfc2NyZWVuc3BhY2UueSwgZGlyX3NjcmVlbnNwYWNlLngpO1xuXG4gIHZlYzIgb2Zmc2V0X3NjcmVlbnNwYWNlID0gZGlyX3NjcmVlbnNwYWNlICogb2Zmc2V0X2RpcmVjdGlvbiAqIHN0cm9rZVdpZHRoIC8gMi4wO1xuICB2ZWMyIG9mZnNldF9jbGlwc3BhY2UgPSBvZmZzZXRfc2NyZWVuc3BhY2UgLyB2aWV3cG9ydFNpemUgKiAyLjA7XG5cbiAgcmV0dXJuIG9mZnNldF9jbGlwc3BhY2U7XG59XG5cbmZsb2F0IGdldFNlZ21lbnRSYXRpbyhmbG9hdCBpbmRleCkge1xuICByZXR1cm4gc21vb3Roc3RlcCgwLjAsIDEuMCwgaW5kZXggLyAobnVtU2VnbWVudHMgLSAxLjApKTtcbn1cblxudm9pZCBnZXRfcG9zX2ZwNjQodmVjMiBzb3VyY2VbMl0sIHZlYzIgdGFyZ2V0WzJdLCBmbG9hdCBzZWdtZW50UmF0aW8sIG91dCB2ZWMyIHBvc2l0aW9uWzRdKSB7XG5cbiAgdmVjMiB2ZXJ0ZXhfaGVpZ2h0ID0gcGFyYWJvbG9pZF9mcDY0KHNvdXJjZSwgdGFyZ2V0LCBzZWdtZW50UmF0aW8pO1xuXG4gIHZlYzIgcG9zaXRpb25fdGVtcFsyXTtcblxuICB2ZWMyX21peF9mcDY0KHNvdXJjZSwgdGFyZ2V0LCBzZWdtZW50UmF0aW8sIHBvc2l0aW9uX3RlbXApO1xuXG4gIHBvc2l0aW9uWzBdID0gcG9zaXRpb25fdGVtcFswXTtcbiAgcG9zaXRpb25bMV0gPSBwb3NpdGlvbl90ZW1wWzFdO1xuXG4gIGlmICh2ZXJ0ZXhfaGVpZ2h0LnggPCAwLjAgfHwgKHZlcnRleF9oZWlnaHQueCA9PSAwLjAgJiYgdmVydGV4X2hlaWdodC55IDw9IDAuMCkpIHtcbiAgICB2ZXJ0ZXhfaGVpZ2h0ID0gdmVjMigwLjAsIDAuMCk7XG4gIH1cblxuICBwb3NpdGlvblsyXSA9IHNxcnRfZnA2NCh2ZXJ0ZXhfaGVpZ2h0KTtcbiAgcG9zaXRpb25bM10gPSB2ZWMyKDEuMCwgMC4wKTtcbn1cblxudm9pZCBtYWluKHZvaWQpIHtcbiAgdmVjNCBpbnN0YW5jZVNvdXJjZVBvc2l0aW9uczY0ID0gdmVjNChpbnN0YW5jZVBvc2l0aW9ucy54LFxuICAgIGluc3RhbmNlUG9zaXRpb25zNjRMb3cueCwgaW5zdGFuY2VQb3NpdGlvbnMueSwgaW5zdGFuY2VQb3NpdGlvbnM2NExvdy55KTtcbiAgdmVjNCBpbnN0YW5jZVRhcmdldFBvc2l0aW9uczY0ID0gdmVjNChpbnN0YW5jZVBvc2l0aW9ucy56LFxuICAgIGluc3RhbmNlUG9zaXRpb25zNjRMb3cueiwgaW5zdGFuY2VQb3NpdGlvbnMudywgaW5zdGFuY2VQb3NpdGlvbnM2NExvdy53KTtcblxuICB2ZWMyIHByb2plY3RlZF9zb3VyY2VfY29vcmRbMl07XG4gIHZlYzIgcHJvamVjdGVkX3RhcmdldF9jb29yZFsyXTtcblxuICBwcm9qZWN0X3Bvc2l0aW9uX2ZwNjQoaW5zdGFuY2VTb3VyY2VQb3NpdGlvbnM2NCwgcHJvamVjdGVkX3NvdXJjZV9jb29yZCk7XG4gIHByb2plY3RfcG9zaXRpb25fZnA2NChpbnN0YW5jZVRhcmdldFBvc2l0aW9uczY0LCBwcm9qZWN0ZWRfdGFyZ2V0X2Nvb3JkKTtcblxuICBmbG9hdCBzZWdtZW50SW5kZXggPSBwb3NpdGlvbnMueDtcbiAgZmxvYXQgc2VnbWVudFJhdGlvID0gZ2V0U2VnbWVudFJhdGlvKHNlZ21lbnRJbmRleCk7XG5cbiAgLy8gaWYgaXQncyB0aGUgZmlyc3QgcG9pbnQsIHVzZSBuZXh0IC0gY3VycmVudCBhcyBkaXJlY3Rpb25cbiAgLy8gb3RoZXJ3aXNlIHVzZSBjdXJyZW50IC0gcHJldlxuICBmbG9hdCBpbmRleERpciA9IG1peCgtMS4wLCAxLjAsIHN0ZXAoc2VnbWVudEluZGV4LCAwLjApKTtcbiAgZmxvYXQgbmV4dFNlZ21lbnRSYXRpbyA9IGdldFNlZ21lbnRSYXRpbyhzZWdtZW50SW5kZXggKyBpbmRleERpcik7XG5cbiAgdmVjMiBjdXJyX3Bvc19tb2RlbHNwYWNlWzRdO1xuXG4gIGdldF9wb3NfZnA2NChwcm9qZWN0ZWRfc291cmNlX2Nvb3JkLCBwcm9qZWN0ZWRfdGFyZ2V0X2Nvb3JkLCBzZWdtZW50UmF0aW8sXG4gICAgY3Vycl9wb3NfbW9kZWxzcGFjZSk7XG5cbiAgdmVjMiBuZXh0X3Bvc19tb2RlbHNwYWNlWzRdO1xuXG4gIGdldF9wb3NfZnA2NChwcm9qZWN0ZWRfc291cmNlX2Nvb3JkLCBwcm9qZWN0ZWRfdGFyZ2V0X2Nvb3JkLCBuZXh0U2VnbWVudFJhdGlvLFxuICAgIG5leHRfcG9zX21vZGVsc3BhY2UpO1xuXG4gIHZlYzQgY3Vycl9wb3NfY2xpcHNwYWNlID0gcHJvamVjdF90b19jbGlwc3BhY2VfZnA2NChjdXJyX3Bvc19tb2RlbHNwYWNlKTtcbiAgdmVjNCBuZXh0X3Bvc19jbGlwc3BhY2UgPSBwcm9qZWN0X3RvX2NsaXBzcGFjZV9mcDY0KG5leHRfcG9zX21vZGVsc3BhY2UpO1xuXG4gIHZlYzIgb2Zmc2V0ID0gZ2V0RXh0cnVzaW9uT2Zmc2V0KG5leHRfcG9zX2NsaXBzcGFjZS54eSAtIGN1cnJfcG9zX2NsaXBzcGFjZS54eSwgcG9zaXRpb25zLnkpO1xuXG4gIGdsX1Bvc2l0aW9uID0gY3Vycl9wb3NfY2xpcHNwYWNlICsgdmVjNChvZmZzZXQsIDAuMCwgMC4wKTtcblxuICB2ZWM0IGNvbG9yID0gbWl4KGluc3RhbmNlU291cmNlQ29sb3JzLCBpbnN0YW5jZVRhcmdldENvbG9ycywgc2VnbWVudFJhdGlvKSAvIDI1NS47XG5cbiAgdkNvbG9yID0gbWl4KFxuICAgIHZlYzQoY29sb3IucmdiLCBjb2xvci5hICogb3BhY2l0eSksXG4gICAgdmVjNChpbnN0YW5jZVBpY2tpbmdDb2xvcnMgLyAyNTUuLCAxLiksXG4gICAgcmVuZGVyUGlja2luZ0J1ZmZlclxuICApO1xufVxuYDtcbiJdfQ==